const express = require('express');
const router = express.Router();
const User = require('../models/user');
const authMiddleware = require('../middleware/auth');
const adminMiddleware = require('../middleware/admin');

// üìç GET /admin/users - L·∫•y danh s√°ch t·∫•t c·∫£ users (ch·ªâ Admin)
router.get('/users', authMiddleware, adminMiddleware, async (req, res) => {
  try {
    // L·∫•y t·∫•t c·∫£ users, kh√¥ng bao g·ªìm password
    const users = await User.find().select('-password');
    
    res.json({
      users,
      total: users.length
    });
  } catch (error) {
    console.error('Get all users error:', error);
    res.status(500).json({ 
      message: 'L·ªói server khi l·∫•y danh s√°ch users',
      error: error.message 
    });
  }
});

// üìç DELETE /admin/users/:id - X√≥a user (ch·ªâ Admin)
router.delete('/users/:id', authMiddleware, adminMiddleware, async (req, res) => {
  try {
    const { id } = req.params;

    // Ki·ªÉm tra user t·ªìn t·∫°i
    const user = await User.findById(id);
    
    if (!user) {
      return res.status(404).json({ 
        message: 'Kh√¥ng t√¨m th·∫•y user' 
      });
    }

    // Kh√¥ng cho ph√©p Admin t·ª± x√≥a ch√≠nh m√¨nh
    if (user._id.toString() === req.user.userId) {
      return res.status(400).json({ 
        message: 'Kh√¥ng th·ªÉ t·ª± x√≥a t√†i kho·∫£n c·ªßa ch√≠nh m√¨nh!' 
      });
    }

    // X√≥a user
    await User.findByIdAndDelete(id);

    res.json({
      message: 'ƒê√£ x√≥a user th√†nh c√¥ng',
      deletedUser: {
        id: user._id,
        name: user.name,
        email: user.email
      }
    });
  } catch (error) {
    console.error('Delete user error:', error);
    res.status(500).json({ 
      message: 'L·ªói server khi x√≥a user',
      error: error.message 
    });
  }
});

// üìç PUT /admin/users/:id/role - Thay ƒë·ªïi role user (ch·ªâ Admin)
router.put('/users/:id/role', authMiddleware, adminMiddleware, async (req, res) => {
  try {
    const { id } = req.params;
    const { role } = req.body;

    // Validate role
    if (!['user', 'admin'].includes(role)) {
      return res.status(400).json({ 
        message: 'Role kh√¥ng h·ª£p l·ªá. Ch·ªâ ch·∫•p nh·∫≠n: user, admin' 
      });
    }

    // T√¨m v√† c·∫≠p nh·∫≠t user
    const user = await User.findById(id);
    
    if (!user) {
      return res.status(404).json({ 
        message: 'Kh√¥ng t√¨m th·∫•y user' 
      });
    }

    // Kh√¥ng cho ph√©p thay ƒë·ªïi role c·ªßa ch√≠nh m√¨nh
    if (user._id.toString() === req.user.userId) {
      return res.status(400).json({ 
        message: 'Kh√¥ng th·ªÉ thay ƒë·ªïi role c·ªßa ch√≠nh m√¨nh!' 
      });
    }

    user.role = role;
    await user.save();

    res.json({
      message: `ƒê√£ c·∫≠p nh·∫≠t role th√†nh ${role}`,
      user: {
        id: user._id,
        name: user.name,
        email: user.email,
        role: user.role
      }
    });
  } catch (error) {
    console.error('Update role error:', error);
    res.status(500).json({ 
      message: 'L·ªói server khi c·∫≠p nh·∫≠t role',
      error: error.message 
    });
  }
});

module.exports = router;
